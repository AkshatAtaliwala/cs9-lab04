from lab04 import printMaze
from lab04 import solveMaze

def test_example():
	maze = [
['+','+','+','+','+','+'],
['+',' ','+',' ',' ','G'],
['+',' ',' ',' ','+','+'],
['+',' ','+','+',' ','+'],
['+',' ',' ',' ',' ','+'],
['+','+','+','+','+','+'] ]
	assert solveMaze(maze, 4, 4) == True
	assert maze == [
['+', '+', '+', '+', '+', '+'],
['+', 8, '+', 11, 12, 'G'],
['+', 7, 9, 10, '+', '+'],
['+', 6, '+', '+', 2, '+'],
['+', 5, 4, 3, 1, '+'],
['+', '+', '+', '+', '+', '+'] ]

def test_1():
	maze = [
['+','+','+','+','+','+'],
['+',' ','+',' ',' ','G'],
['+',' ',' ',' ','+','+'],
['+',' ','+','+',' ','+'],
['+',' ',' ',' ',' ','+'],
['+','+','+','+','+','+'] ]
	assert solveMaze(maze, 4, 1) == True
	assert maze == [
['+', '+', '+', '+', '+', '+'],
['+', 4, '+', 7, 8, 'G'],
['+', 3, 5, 6, '+', '+'],
['+', 2, '+', '+', ' ', '+'],
['+', 1, ' ', ' ', ' ', '+'],
['+', '+', '+', '+', '+', '+'] ]

def test_2():
	maze = [
['+','+','+','+','+','+'],
['+',' ','+',' ',' ','G'],
['+',' ',' ',' ','+','+'],
['+',' ','+','+',' ','+'],
['+',' ',' ',' ',' ','+'],
['+','+','+','+','+','+'] ]
	assert solveMaze(maze, 1, 3) == True
	assert maze == [
['+', '+', '+', '+', '+', '+'],
['+', ' ', '+', 1, 2, 'G'],
['+', ' ', ' ', ' ', '+', '+'],
['+', ' ', '+', '+', ' ', '+'],
['+', ' ', ' ', ' ', ' ', '+'],
['+', '+', '+', '+', '+', '+'] ]

def test_Unreachable():
	maze = [
['+','+','+','+','+','+'],
['+',' ','+',' ','+','G'],
['+',' ',' ',' ','+','+'],
['+',' ','+','+',' ','+'],
['+',' ',' ',' ',' ','+'],
['+','+','+','+','+','+'] ]
	assert solveMaze(maze, 4, 1) == False
	assert maze == [
['+', '+', '+', '+', '+', '+'],
['+', 4, '+', 7, '+', 'G'],
['+', 3, 5, 6, '+', '+'],
['+', 2, '+', '+', 11, '+'],
['+', 1, 8, 9, 10, '+'],
['+', '+', '+', '+', '+', '+'] ]

def test_4():
	maze = [
['+','+','+','+','+','+'],
['+','G','+',' ',' ',' '],
['+',' ',' ',' ','+','+'],
['+',' ','+','+',' ','+'],
['+',' ',' ',' ',' ','+'],
['+','+','+','+','+','+'] ]
	assert solveMaze(maze, 4, 1) == True
	assert maze == [
['+', '+', '+', '+', '+', '+'],
['+', 'G', '+', ' ', ' ', ' '],
['+', 3, ' ', ' ', '+', '+'],
['+', 2, '+', '+', ' ', '+'],
['+', 1, ' ', ' ', ' ', '+'],
['+', '+', '+', '+', '+', '+'] ]

def test_StartOnGoal():
	maze = [
['+','+','+','+','+','+'],
['+',' ','+',' ',' ','G'],
['+',' ',' ',' ','+','+'],
['+',' ','+','+',' ','+'],
['+',' ',' ',' ',' ','+'],
['+','+','+','+','+','+'] ]
	assert solveMaze(maze, 1, 5) == True
	assert maze == [
['+', '+', '+', '+', '+', '+'],
['+', ' ', '+', ' ', ' ', 'G'],
['+', ' ', ' ', ' ', '+', '+'],
['+', ' ', '+', '+', ' ', '+'],
['+', ' ', ' ', ' ', ' ', '+'],
['+', '+', '+', '+', '+', '+'] ]

def test_Boundary():
	maze = [
['+','+','+','+','+','+'],
['+',' ','+',' ',' ','G'],
['+',' ',' ',' ','+','+'],
['+',' ','+','+',' ','+'],
['+',' ',' ',' ',' ','+'],
['+','+','+','+','+','+'] ]
	assert solveMaze(maze, 0, 0) == False
	assert maze == [
['+', '+', '+', '+', '+', '+'],
['+', ' ', '+', ' ', ' ', 'G'],
['+', ' ', ' ', ' ', '+', '+'],
['+', ' ', '+', '+', ' ', '+'],
['+', ' ', ' ', ' ', ' ', '+'],
['+', '+', '+', '+', '+', '+'] ]